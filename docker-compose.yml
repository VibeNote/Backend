version: '3.8'

services:
  models-base:
    build:
      context: .
      dockerfile: ./models/shared/Dockerfile
    image: models-base

  webapi:
    build:
      context: .
      dockerfile: Presentation/WebApp/Dockerfile
      target: runtime
    ports:
      - "8511:8080"
    env_file:
      - .env
    environment:
      DOTNET_ENVIRONMENT: "Development"
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
      ConnectionStrings__Default: Host=${PostgreSqlConfiguration__Host};Port=${PostgreSqlConfiguration__Port};Database=${PostgreSqlConfiguration__DatabaseName};Username=${PostgreSqlConfiguration__Username};Password=${PostgreSqlConfiguration__Password}
      Jwt__SecretKey: ${TokenInfoConfiguration__Secret}
    depends_on:
      - db
      - emotion-server
      - recommendation-server
    working_dir: /app

  db:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${PostgreSqlConfiguration__DatabaseName}
      POSTGRES_USER: ${PostgreSqlConfiguration__Username}
      POSTGRES_PASSWORD: ${PostgreSqlConfiguration__Password}
    volumes:
      - pgdata:/var/lib/postgresql/data

  emotion-server:
    build:
      context: ./models/emotion-server
      args:
        HF_TOKEN: ${HF_TOKEN}
    ports:
      - "5000:5000"
    volumes:
      - transformers_cache:/root/.cache/huggingface
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 1m
      timeout: 10s
      retries: 5
    environment:
      - HF_TOKEN=${HF_TOKEN}
    depends_on:
      - models-base

  recommendation-server:
    build:
      context: ./models/recommendation-server
      args:
        HF_TOKEN: ${HF_TOKEN}
    ports:
      - "5001:5001"
    volumes:
      - transformers_cache:/root/.cache/huggingface
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 1m
      timeout: 10s
      retries: 5
    depends_on:
      - models-base

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./logs-metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - webapi

  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./logs-metrics/loki/loki-config.yaml:/etc/loki/config.yaml
      - ./logs-metrics/loki/chunks:/tmp/loki/chunks
      - ./logs-metrics/loki/index:/tmp/loki/index
      - ./logs-metrics/loki/boltdb-cache:/tmp/loki/boltdb-cache
      - ./logs-metrics/loki/compactor:/tmp/loki/compactor
  
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
  
  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs-metrics/promtail/promtail-config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
  
  

volumes:
  pgdata:
  transformers_cache:
  grafana-storage: