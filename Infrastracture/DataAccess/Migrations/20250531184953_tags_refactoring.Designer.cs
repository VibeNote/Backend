// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(VibeNoteDatabaseContext))]
    [Migration("20250531184953_tags_refactoring")]
    partial class tags_refactoring
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Analysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("EntryId");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Result");

                    b.HasKey("Id");

                    b.HasIndex("EntryId")
                        .IsUnique();

                    b.ToTable("AnalysisTable");
                });

            modelBuilder.Entity("Core.Entities.EmotionTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AnalysisId")
                        .HasColumnType("uuid")
                        .HasColumnName("AnalysisId");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("TagId");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("TagId");

                    b.ToTable("EmotionTagTable");
                });

            modelBuilder.Entity("Core.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("EntryTable");
                });

            modelBuilder.Entity("Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("EngName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EngName");

                    b.Property<int>("EnumValue")
                        .HasColumnType("integer")
                        .HasColumnName("EnumValue");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RuName");

                    b.HasKey("Id");

                    b.ToTable("TagTable");
                });

            modelBuilder.Entity("Core.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("TokenTable");
                });

            modelBuilder.Entity("Core.Entities.TriggerWord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AnalysisId")
                        .HasColumnType("uuid")
                        .HasColumnName("AnalysisId");

                    b.Property<Guid?>("EmotionTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("TagId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Word");

                    b.HasKey("Id");

                    b.HasIndex("EmotionTagId");

                    b.ToTable("TriggerWordTable");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("BlockedTill")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("BlockedTill");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsAuthBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("IsAuthBlocked");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("UserTable");
                });

            modelBuilder.Entity("Core.Entities.Analysis", b =>
                {
                    b.HasOne("Core.Entities.Entry", null)
                        .WithOne("Analysis")
                        .HasForeignKey("Core.Entities.Analysis", "EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EmotionTag", b =>
                {
                    b.HasOne("Core.Entities.Analysis", null)
                        .WithMany("EmotionTags")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Entities.TriggerWord", b =>
                {
                    b.HasOne("Core.Entities.EmotionTag", null)
                        .WithMany("TriggerWords")
                        .HasForeignKey("EmotionTagId");
                });

            modelBuilder.Entity("Core.Entities.Analysis", b =>
                {
                    b.Navigation("EmotionTags");
                });

            modelBuilder.Entity("Core.Entities.EmotionTag", b =>
                {
                    b.Navigation("TriggerWords");
                });

            modelBuilder.Entity("Core.Entities.Entry", b =>
                {
                    b.Navigation("Analysis");
                });
#pragma warning restore 612, 618
        }
    }
}
